/* ###
 * IP: REMATH
 *
 * Copyright (c) 2021 GrammaTech, Inc.
 */
// Builds a Ghidra Extension for a given Ghidra installation.
//
// An absolute path to the Ghidra installation directory must be supplied either by setting the
// GHIDRA_INSTALL_DIR environment variable or Gradle project property:
//
//     > export GHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//     > gradle
//
//         or
//
//     > gradle -PGHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//
// Gradle should be invoked from the directory of the project to build.  Please see the
// application.gradle.version property in <GHIDRA_INSTALL_DIR>/Ghidra/application.properties
// for the correction version of Gradle to use for the Ghidra installation you specify.

apply plugin: 'java-library'
compileJava {options.encoding = "UTF-8"}
compileTestJava {options.encoding = "UTF-8"}

//----------------------START "DO NOT MODIFY" SECTION------------------------------
def ghidraInstallDir

if (System.env.GHIDRA_INSTALL_DIR) {
	ghidraInstallDir = System.env.GHIDRA_INSTALL_DIR
}
else if (project.hasProperty("GHIDRA_INSTALL_DIR")) {
	ghidraInstallDir = project.getProperty("GHIDRA_INSTALL_DIR")
}

if (ghidraInstallDir) {
	apply from: new File(ghidraInstallDir).getCanonicalPath() + "/support/buildExtension.gradle"
}
else {
	throw new GradleException("GHIDRA_INSTALL_DIR is not defined!")
}
//----------------------END "DO NOT MODIFY" SECTION-------------------------------

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(
            'junit:junit:4.12',
            'org.junit.jupiter:junit-jupiter-api:5.3.2'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.3.2',
            'org.junit.vintage:junit-vintage-engine:5.3.2'
    )
}

tasks.test {
    useJUnitPlatform()
}

buildExtension {
    exclude 'gradle*'
}

test {
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}
